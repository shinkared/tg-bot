from aiogram.fsm.state import StatesGroup, State
from config import *
from keyboards import *
import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import *
from typing import Optional
from aiogram.filters.callback_data import CallbackData
from queries import Query, users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
router = Router()

bot = Bot(TOKEN, parse_mode="HTML")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∏—Å–∫–µ
search = {}  # –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º
searchn = {}  # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–∞–∑—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è


# –ö–ª–∞—Å—Å —Ö—Ä–∞–Ω—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–ª–±–µ–∫–∞
class CallbackFactory(CallbackData, prefix="cb"):
    action: str
    value: Optional[str]
    value2: Optional[str]


# –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class States(StatesGroup):
    """
    –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    first_year - –≤—ã–±–æ—Ä –≥–æ–¥–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞

    last_year - –≤—ã–±–æ—Ä –≥–æ–¥–∞ –∫–æ–Ω—Ü–∞ –ø–æ–∏—Å–∫–∞

    film_name_enter - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
    """
    first_year = State()
    last_year = State()
    film_name_enter = State()


@router.callback_query(CallbackFactory.filter())
async def callbacks_fb(
        callback: types.CallbackQuery,
        callback_data: CallbackFactory,
        state: FSMContext
):
    match callback_data.action:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        case "q":
            img1 = URLInputFile(
                Query.get_big_image(callback_data.value),
                filename="film1.jpg"
            )
            await callback.message.answer_photo(img1)
        # –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ª–µ–≤—ã–π —Ñ–∏–ª—å–º
        case "nw_1":
            Query.update_nw(callback.from_user.id, callback_data.value)
            await callback.message.edit_reply_markup(
                reply_markup=Keyboard.new(callback_data.value, callback_data.value2))
            await echo_handler(callback.message, callback.from_user.id)
        # –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø—Ä–∞–≤—ã–π —Ñ–∏–ª—å–º
        case "nw_2":
            Query.update_nw(callback.from_user.id, callback_data.value2)
            await callback.message.edit_reply_markup(
                reply_markup=Keyboard.new(callback_data.value, callback_data.value2))
            await echo_handler(callback.message, callback.from_user.id)
        # –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –æ–±–∞ —Ñ–∏–ª—å–º–∞
        case "nw_3":
            Query.update_nw(callback.from_user.id, callback_data.value)
            Query.update_nw(callback.from_user.id, callback_data.value2)
            await callback.message.edit_reply_markup(
                reply_markup=Keyboard.new(callback_data.value, callback_data.value2))
            await echo_handler(callback.message, callback.from_user.id)
        # –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–µ–≤—ã–π —Ñ–∏–ª—å–º
        case "film_1":
            Query.update_scores(callback.from_user.id, callback_data.value, callback_data.value2)
            await callback.message.edit_reply_markup(
                reply_markup=Keyboard.new(callback_data.value, callback_data.value2))
            await echo_handler(callback.message, callback.from_user.id)
        # –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–∞–≤—ã–π —Ñ–∏–ª—å–º
        case "film_2":
            Query.update_scores(callback.from_user.id, callback_data.value2, callback_data.value)
            await callback.message.edit_reply_markup(
                reply_markup=Keyboard.new(callback_data.value, callback_data.value2))
            await echo_handler(callback.message, callback.from_user.id)
        # –ó–∞–ø–∏—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
        case "n_1":
            setting = Query.get_settings(callback.from_user.id)
            if setting > 250:
                Query.update_settings(callback.from_user.id, setting - 250)
                await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                await echo_settings(callback.message, callback.from_user.id)
            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å —Å–ø–∏—Å–æ–∫")
                await echo_settings(callback.message, callback.from_user.id)
        # –ó–∞–ø–∏—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
        case "n_2":
            setting = Query.get_settings(callback.from_user.id)
            if setting <= 4000:
                Query.update_settings(callback.from_user.id, setting + 250)
                await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                await echo_settings(callback.message, callback.from_user.id)
            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–ø–∏—Å–æ–∫")
                await echo_settings(callback.message, callback.from_user.id)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
        case "set_1":
            await state.set_state(States.first_year)
            await callback.message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞:", reply_markup=Keyboard.cancel())
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
        case "set_2":
            await state.set_state(States.last_year)
            await callback.message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ–¥ –∫–æ–Ω—Ü–∞ –ø–æ–∏—Å–∫–∞:", reply_markup=Keyboard.cancel())
        # –°–Ω—è—Ç–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        case "cancel":
            await state.clear()
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer(text="‚úÖ", reply_markup=Keyboard.reply())
        # –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É
        case "search":
            searchn[callback.from_user.id] = 5
            search[callback.from_user.id] = callback_data.value
            await echo_handler(callback.message, callback.from_user.id)


@router.message(Command(commands=["start"]))
async def command_start_handler(message: Message) -> None:
    """
    –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start
    """
    Query.register_user(message.from_user.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}!‚úã</b> –Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–ª—å–º–æ–≤—ã–π –±–æ—Ç! –í–º–µ—Å—Ç–µ –º—ã "
                         f"—Å–º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.üì∫üçø",
                         reply_markup=Keyboard.reply())
    await echo_help(message)
    await message.answer(f"""–¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Ç–æ–ø–∞ —Ñ–∏–ª—å–º–æ–≤!üëá""",
                         reply_markup=Keyboard.reply())


@router.message(Text(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è©Ô∏è", ignore_case=True))
@router.message(Command(commands=["next"]))
async def echo_handler(message: types.Message, user_id=0) -> None:
    """
    –í—ã–≤–æ–¥ –¥–≤—É—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_id –ø–æ –≤—ã–∑–æ–≤—É
    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å echo_handler —Å –∫–æ–ª–±–µ–∫–∞, message –±—É–¥–µ—Ç –æ—Ç –±–æ—Ç–∞ (—Ç–µ—Ä—è–µ—Ç—Å—è user_id)
    if message.from_user.id != bot_id:
        user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    is_approximating = False
    message_text = ''
    if user_id in search:
        is_approximating = True

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if not (user_id in users):
        users[user_id] = Query.get_n(user_id)[0]

    # –ï—Å–ª–∏ –æ—Ü–µ–Ω–æ–∫ –±–æ–ª–µ–µ 20, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
    if users[user_id] > 20:
        films = Query.get_film_10(user_id)
    else:
        films = Query.get_film(user_id)

    if len(films) == 2:
        if is_approximating:
            films[0] = Query.get_s_film(search[user_id])
            searchn[user_id] -= 1
            message_text = f'–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏–ª—å–º–∞ <b>({5 - searchn[user_id]}/5)</b>\n'
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ñ–∏–ª—å–º –±—ã–ª –æ—Ü–µ–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
            if searchn[user_id] == 0:
                del (search[user_id])
                del (searchn[user_id])
        is_uploaded = [False, False]  # –ó–∞–≥—Ä—É–∂–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        images = []

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        for i in range(2):
            if not films[i][-2]:
                img1 = URLInputFile(
                    (films[i][3][:-4] + 'QL75_UX380_CR0,1,380,562_.jpg'),
                    filename=f"film{i}.jpg"
                )
                images.append(InputMediaPhoto(str='photo', media=img1))
                is_uploaded[i] = True
            else:
                images.append(InputMediaPhoto(str='photo', media=films[i][-2]))

        try:
            media = await message.answer_media_group(images)
            await message.answer(f'{message_text}{films[0][1]} ({films[0][2]}) üëà\n{films[1][1]} ({films[1][2]}) üëâ',
                                 reply_markup=Keyboard.get(films[0][0], films[1][0]))

            # –ó–∞–ø–∏—Å—å id —Ñ–∞–π–ª–∞ –≤ –±–¥
            for i in range(2):
                if is_uploaded[i]:
                    if i == 0:
                        idn = films[0][0]
                    else:
                        idn = films[1][0]
                    Query.update_image(1, idn, media[i].photo[-1].file_id)

        except TypeError:
            await message.answer("Nice try!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await echo_settings(message, message.from_user.id)


@router.message(Text(text="–ú–æ–π —Ç–æ–ø üéñÔ∏è", ignore_case=True))
@router.message(Command(commands=["top"]))
async def echo_top(message: types.Message) -> None:
    re = Query.top_10(message.from_user.id)
    ans = '<b>–¢–≤–æ–π —Ç–æ–ø 10 —Ñ–∏–ª—å–º–æ–≤: üì∫üçø</b>\n'
    k = 1
    images = []
    updates = []
    for i in re:
        if i[-1]:
            images.append(InputMediaPhoto(str='photo', media=i[-1]))
            updates.append(False)
        else:
            images.append(InputMediaPhoto(str='photo', media=URLInputFile(
                i[1],
                filename=f"film_top_{k}.jpg"
            )))
            updates.append(True)
        ans += f"<b>{k}</b>. {i[0]}\n"
        k += 1
    msg = await message.answer_media_group(images)
    for i in range(len(updates)):
        if updates[i]:
            Query.update_image(0, re[i][2], msg[i].photo[-1].file_id)
    await message.answer(ans, reply_markup=Keyboard.reply())


@router.message(Text(text="–ü–æ–º–æ—â—å üí¨", ignore_case=True))
@router.message(Command(commands=["help"]))
async def echo_help(message: types.Message) -> None:
    await message.answer(f"<b>–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:</b>\n1. <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤</b>: –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–≤–∞ "
                         f"—Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞.\n2. <b>–ú–æ–π —Ç–æ–ø  üéñÔ∏è</b>: –Ø —Å–æ–∑–¥–∞—é –ª–∏—á–Ω—ã–π —Ç–æ–ø "
                         f"—Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –≥–æ–ª–æ—Å–æ–≤.\n3. <b>–û—Ç–º–µ—Ç–∫–∞ \"–Ω–µ —Å–º–æ—Ç—Ä–µ–ª\"</b>: –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–∏–Ω "
                         f"–∏–ª–∏ –¥–≤–∞ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –µ—â–µ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ "
                         f"–ø–æ—è–≤–ª—è–ª–∏—Å—å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n4. <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è</b>: –£ "
                         f"–º–µ–Ω—è –µ—Å—Ç—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.\n"
                         f"5. <b>–ü–æ–∏—Å–∫ üîé</b>: –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏ –µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏\n"
                         f"<b>–ß–µ–º –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–æ, —Ç–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–ø.</b>",
                         reply_markup=Keyboard.reply())


@router.message(Text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", ignore_case=True))
@router.message(Command(commands=["settings"]))
async def echo_settings(message: types.Message, user_id=0) -> None:
    if message.from_user.id != bot_id:
        user_id = message.from_user.id
    settings = Query.get_user_by_id(user_id)
    n_films = Query.get_settings_n(user_id)
    await message.answer(
        f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ–¥ —Å <b>{settings[1]}</b> –ø–æ <b>{settings[2]}</b>\n–î–æ—Å—Ç—É–ø–Ω—ã—Ö"
        f" –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤: <b>{n_films}</b>\n"
        f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üëá",
        reply_markup=Keyboard.settings())


@router.message(Text(text="–ü–æ–∏—Å–∫ üîé", ignore_case=True))
@router.message(Command(commands=["search"]))
async def echo_search(message: types.Message, state: FSMContext):
    await state.set_state(States.film_name_enter)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", reply_markup=Keyboard.cancel())


@router.message(States.first_year)
async def choose_1(message: types.Message, state: FSMContext):
    get = message.text
    if get.isdigit():
        get = int(get)
        if 1900 < get < 2050:
            Query.update_settings_low(get, message.from_user.id)
            await message.answer(text="–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        else:
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    await state.clear()
    await echo_settings(message, message.from_user.id)


@router.message(States.last_year)
async def choose_2(message: types.Message, state: FSMContext):
    get = message.text
    if get.isdigit():
        get = int(get)
        if 1900 < get < 2050:
            Query.update_settings_hi(get, message.from_user.id)
            await message.answer(text="–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        else:
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    await state.clear()
    await echo_settings(message, message.from_user.id)


@router.message(States.film_name_enter)
async def choose_3(message: types.Message, state: FSMContext):
    ans = Query.get_search(message.text)
    send = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ —Ç–æ–ø–µ):</b>\n"
    k = 1
    films = []
    if ans:
        for i in ans:
            films.append(i[0])
            send += f"<b>{k}.</b> {i[1]} ({i[2]})\n"
            k += 1
        await state.clear()
        await message.answer(f"{send}", reply_markup=Keyboard.search(films))
    else:
        await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòì\n –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:",
                             reply_markup=Keyboard.cancel())


@router.message(Command(commands=["about"]))
async def echo_about(message: types.Message):
    await bot.send_message(233741389, f"{message.from_user.full_name}", disable_notification=True)
    await message.answer("–í–∞–ª–µ–Ω—Ç–∏–Ω –®–∏–Ω–∫–∞—Ä–µ–≤, 2023", reply_markup=Keyboard.reply())


async def main() -> None:
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
